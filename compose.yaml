services:
  # api-platform services
  php:
    image: ${IMAGES_PREFIX:-}app-php
    depends_on:
      - database
    restart: unless-stopped
    environment:
      PWA_UPSTREAM: pwa:3000
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS:-^${SERVER_NAME:-example\.com|localhost}|php$$}
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-16}&charset=${POSTGRES_CHARSET:-utf8}
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
      MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-localhost}/.well-known/mercure}
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp

  pwa:
    image: ${IMAGES_PREFIX:-}app-pwa
    environment:
      NEXT_PUBLIC_ENTRYPOINT: http://php

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app}
      # You should definitely change the password in production
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      - POSTGRES_USER=${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

# Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

  # other services
  angular:
    build: ./front/docker/angular
    volumes:
      - ./front/dist:/mnt/dist

  front:
    build: ./docker/front
    depends_on:
      - angular
      - slim-web
    ports:
      - 8080:80

  mailhog:
    image: mailhog/mailhog
    ports:
      - 8025:8025

  mysql:
    image: mysql:5.6
    environment:
      MYSQL_DATABASE: tkdo
      MYSQL_USER: tkdo
      MYSQL_PASSWORD: mdptkdo
      MYSQL_ROOT_PASSWORD: mdproot
    healthcheck:
      test: >
        out=$$(mysqladmin ping -h localhost -P 3306 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD 2>&1);
        echo $$out | grep 'mysqld is alive' || { echo $$out; exit 1; }
      interval: 5s
      retries: 10
      start_interval: 1s
      start_period: 30s

  npm:
    build:
      context: ./front/docker/npm
      args:
        DEV_GID: ${DEV_GID:-1000}
        DEV_UID: ${DEV_UID:-1000}
    cap_add:
      # Mandatory to be able to run chrome without --no-sandbox option
      - SYS_ADMIN
    environment:
      - CYPRESS_CACHE_FOLDER=/mnt/tkdo/.cache/Cypress
      - NG_CLI_ANALYTICS=false
      - NPM_CONFIG_CACHE=/mnt/tkdo/.cache/npm
    volumes:
      - ./:/mnt/tkdo


  php-cli:
    build: docker/php-cli
    environment:
      HOME: /opt/tkdo
      XDG_CACHE_HOME: /opt/tkdo/.cache
      docker: "true"
      MAILHOG_BASE_URI: http://mailhog:8025/
      MHSENDMAIL_OPTIONS: --smtp-addr=mailhog:1025
      MYSQL_DATABASE: tkdo
      MYSQL_HOST: mysql
      MYSQL_PASSWORD: mdptkdo
      MYSQL_PORT: 3306
      MYSQL_USER: tkdo
      TKDO_BASE_URI: http://slim-web
      TKDO_MAILER_FROM: noreply@slim
    profiles:
      - tools
    user: ${UID:-1000}:${GID:-1000}
    volumes:
      - .:/opt/tkdo
    working_dir: /opt/tkdo/api-v1

  slim-fpm:
    build: ./docker/slim-fpm
    depends_on:
      mysql:
        condition: service_healthy
      mailhog:
        condition: service_started
    environment:
      docker: "true"
      MHSENDMAIL_OPTIONS: --smtp-addr=mailhog:1025
      MYSQL_DATABASE: tkdo
      MYSQL_HOST: mysql
      MYSQL_PASSWORD: mdptkdo
      MYSQL_PORT: 3306
      MYSQL_USER: tkdo
      TKDO_BASE_URI: http://slim-web
      TKDO_MAILER_FROM: noreply@slim
      WWW_GID: ${GID:-1000}
      WWW_UID: ${UID:-1000}
    volumes:
      - ./api-v1:/var/www/html
      - ./docker/slim-fpm/docker-php-entrypoint:/usr/local/bin/docker-php-entrypoint

  slim-web:
    depends_on:
      - slim-fpm
    image: nginx:1.27
    ports:
      - "8081:80"
    volumes:
      - ./api-v1:/var/www/html
      - ./docker/slim-web/default.conf:/etc/nginx/conf.d/default.conf

volumes:
  # api-platform volumes
  caddy_data:
  caddy_config:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###
